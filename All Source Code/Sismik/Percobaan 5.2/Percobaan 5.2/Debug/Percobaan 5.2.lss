
Percobaan 5.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000290  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000002bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000df1  00000000  00000000  0000030f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006b0  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000042d  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000ac  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d5  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000595  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  000023f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.LCD_Command 00000056  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.LCD_Char 00000056  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_Init 0000003c  000001dc  000001dc  00000250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_String 00000040  0000019c  0000019c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .progmemx.data 0000000d  0000006c  0000006c  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 18 .text.main    00000076  0000007a  0000007a  000000ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
   8:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
   c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  10:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  14:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  18:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  1c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  20:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  24:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  28:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  2c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  30:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  34:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  38:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  3c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  40:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  44:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  48:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  4c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>
  50:	0c 94 0c 01 	jmp	0x218	; 0x218 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000218 <__bad_interrupt>:
 218:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Command:

000000f0 <LCD_Command>:
#define LCD_Port PORTB
#define RS PB0
#define EN PB1
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	28 2f       	mov	r18, r24
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	92 2b       	or	r25, r18
  fa:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);
  fc:	98 b3       	in	r25, 0x18	; 24
  fe:	9e 7f       	andi	r25, 0xFE	; 254
 100:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<EN);
 102:	98 b3       	in	r25, 0x18	; 24
 104:	92 60       	ori	r25, 0x02	; 2
 106:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	98 bb       	out	0x18, r25	; 24
 110:	32 e4       	ldi	r19, 0x42	; 66
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Command+0x22>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Command+0x28>
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 118:	28 b3       	in	r18, 0x18	; 24
 11a:	30 e1       	ldi	r19, 0x10	; 16
 11c:	83 9f       	mul	r24, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	88 bb       	out	0x18, r24	; 24
 130:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Command+0x4c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Command+0x52>
 142:	00 00       	nop
 144:	08 95       	ret

Disassembly of section .text.LCD_Char:

00000146 <LCD_Char>:
	_delay_ms(2);
}
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 146:	98 b3       	in	r25, 0x18	; 24
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	28 2f       	mov	r18, r24
 14c:	20 7f       	andi	r18, 0xF0	; 240
 14e:	92 2b       	or	r25, r18
 150:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);
 152:	98 b3       	in	r25, 0x18	; 24
 154:	91 60       	ori	r25, 0x01	; 1
 156:	98 bb       	out	0x18, r25	; 24
	LCD_Port|= (1<<EN);
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	92 60       	ori	r25, 0x02	; 2
 15c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9d 7f       	andi	r25, 0xFD	; 253
 164:	98 bb       	out	0x18, r25	; 24
 166:	32 e4       	ldi	r19, 0x42	; 66
 168:	3a 95       	dec	r19
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCD_Char+0x22>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <LCD_Char+0x28>
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 16e:	28 b3       	in	r18, 0x18	; 24
 170:	30 e1       	ldi	r19, 0x10	; 16
 172:	83 9f       	mul	r24, r19
 174:	c0 01       	movw	r24, r0
 176:	11 24       	eor	r1, r1
 178:	92 2f       	mov	r25, r18
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	89 2b       	or	r24, r25
 17e:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 180:	88 b3       	in	r24, 0x18	; 24
 182:	82 60       	ori	r24, 0x02	; 2
 184:	88 bb       	out	0x18, r24	; 24
 186:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	83 ef       	ldi	r24, 0xF3	; 243
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Char+0x4c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Char+0x52>
 198:	00 00       	nop
 19a:	08 95       	ret

Disassembly of section .text.LCD_Init:

000001dc <LCD_Init>:
	_delay_ms(2);
}
void LCD_Init (void)
{
	LCD_Dir = 0xFF;
 1dc:	8f ef       	ldi	r24, 0xFF	; 255
 1de:	87 bb       	out	0x17, r24	; 23
 1e0:	87 e8       	ldi	r24, 0x87	; 135
 1e2:	93 e1       	ldi	r25, 0x13	; 19
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCD_Init+0x8>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <LCD_Init+0xe>
 1ea:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x02);
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
	LCD_Command(0x28);
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
	LCD_Command(0x0c);
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
	LCD_Command(0x06);
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
	LCD_Command(0x01);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
 20a:	83 ef       	ldi	r24, 0xF3	; 243
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
 216:	08 95       	ret

Disassembly of section .text.LCD_String:

0000019c <LCD_String>:
	_delay_ms(2);
}
void LCD_String (const char *str)
{
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	6b 01       	movw	r12, r22
 1a8:	e8 2e       	mov	r14, r24
	int i;
	for(i=0;str[i]!=0;i++)
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LCD_String+0x1a>
	{
		LCD_Char (str[i]);
 1b0:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Char>
	_delay_ms(2);
}
void LCD_String (const char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1b4:	21 96       	adiw	r28, 0x01	; 1
 1b6:	ae 2d       	mov	r26, r14
 1b8:	c6 01       	movw	r24, r12
 1ba:	8c 0f       	add	r24, r28
 1bc:	9d 1f       	adc	r25, r29
 1be:	a1 1d       	adc	r26, r1
 1c0:	d7 fd       	sbrc	r29, 7
 1c2:	aa 95       	dec	r26
 1c4:	fc 01       	movw	r30, r24
 1c6:	84 91       	lpm	r24, Z
 1c8:	a7 fd       	sbrc	r26, 7
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	f0 cf       	rjmp	.-32     	; 0x1b0 <LCD_String+0x14>
	{
		LCD_Char (str[i]);
	}
}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

Disassembly of section .text.main:

0000007a <main>:
	LCD_Command (0x80);
}
int main()
{
	int i;
	LCD_Init();
  7a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_Init>
	LCD_String("Running Text");
  7e:	6c e6       	ldi	r22, 0x6C	; 108
  80:	70 e0       	ldi	r23, 0x00	; 0
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_String>
  88:	2f e7       	ldi	r18, 0x7F	; 127
  8a:	8a e1       	ldi	r24, 0x1A	; 26
  8c:	96 e0       	ldi	r25, 0x06	; 6
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x14>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x1e>
  98:	00 00       	nop
	_delay_ms(2000);
	
	char str[]="Running Text";
	int shift = sizeof(str)/sizeof (str[0]);
  9a:	0d e0       	ldi	r16, 0x0D	; 13
  9c:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
	{
		for(i=0;i<shift;i++)
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	0d c0       	rjmp	.+26     	; 0xbe <main+0x44>
		{
			LCD_Command(0x1c);
  a4:	8c e1       	ldi	r24, 0x1C	; 28
  a6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
  aa:	2f e9       	ldi	r18, 0x9F	; 159
  ac:	86 e8       	ldi	r24, 0x86	; 134
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x36>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x40>
  ba:	00 00       	nop
	char str[]="Running Text";
	int shift = sizeof(str)/sizeof (str[0]);
	
	while(1)
	{
		for(i=0;i<shift;i++)
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	c0 17       	cp	r28, r16
  c0:	d1 07       	cpc	r29, r17
  c2:	84 f3       	brlt	.-32     	; 0xa4 <main+0x2a>
		{
			LCD_Command(0x1c);
			_delay_ms(500);
		}
		shift=shift+16;
  c4:	00 5f       	subi	r16, 0xF0	; 240
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<shift;i++)
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <main+0x6e>
		{
			LCD_Command(0x18);
  ce:	88 e1       	ldi	r24, 0x18	; 24
  d0:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_Command>
  d4:	2f e9       	ldi	r18, 0x9F	; 159
  d6:	86 e8       	ldi	r24, 0x86	; 134
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x60>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x6a>
  e4:	00 00       	nop
		{
			LCD_Command(0x1c);
			_delay_ms(500);
		}
		shift=shift+16;
		for(i=0;i<shift;i++)
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	c0 17       	cp	r28, r16
  ea:	d1 07       	cpc	r29, r17
  ec:	84 f3       	brlt	.-32     	; 0xce <main+0x54>
  ee:	d7 cf       	rjmp	.-82     	; 0x9e <main+0x24>
