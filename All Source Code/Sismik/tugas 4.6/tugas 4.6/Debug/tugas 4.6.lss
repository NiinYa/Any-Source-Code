
tugas 4.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000609  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056d  00000000  00000000  000007c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025c  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000302  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000012da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
#define BAUD 4800
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void uart_init (void)
{
	UBRRH=(BAUDRATE>>8);
  6c:	10 bc       	out	0x20, r1	; 32
	UBRRL=BAUDRATE;
  6e:	8c e0       	ldi	r24, 0x0C	; 12
  70:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN)|(1<<RXEN);
  72:	8a b1       	in	r24, 0x0a	; 10
  74:	88 61       	ori	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  78:	80 b5       	in	r24, 0x20	; 32
  7a:	86 68       	ori	r24, 0x86	; 134
  7c:	80 bd       	out	0x20, r24	; 32
  7e:	08 95       	ret

00000080 <ADC_init>:
}

void ADC_init(void){
	ADMUX |=(0<<REFS1)|(1<<REFS0);
  80:	87 b1       	in	r24, 0x07	; 7
  82:	80 64       	ori	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1);
  86:	86 b1       	in	r24, 0x06	; 6
  88:	86 6c       	ori	r24, 0xC6	; 198
  8a:	86 b9       	out	0x06, r24	; 6
	ADCSRA|=(1<<ADSC);
  8c:	86 b1       	in	r24, 0x06	; 6
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	86 b9       	out	0x06, r24	; 6
	while ((ADCSRA & (1<<ADSC)) != 0);
  92:	36 99       	sbic	0x06, 6	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <ADC_init+0x12>
}
  96:	08 95       	ret

00000098 <main>:

int main (void)
{
	DDRA = 0x00;
  98:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
  9a:	1b ba       	out	0x1b, r1	; 27
	LEDDir = 0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
	LED = 0xFF;
  a0:	88 bb       	out	0x18, r24	; 24
	unsigned char a;
	ADC_init();
  a2:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	uart_init();
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
	while(1){
		a = ADC;
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	95 b1       	in	r25, 0x05	; 5
		ADCSRA |= (1<<ADSC);
  ae:	96 b1       	in	r25, 0x06	; 6
  b0:	90 64       	ori	r25, 0x40	; 64
  b2:	96 b9       	out	0x06, r25	; 6
		while ((ADCSRA & (1<<ADSC)) != 0);
  b4:	36 99       	sbic	0x06, 6	; 6
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x1c>
		LED=ADC;
  b8:	24 b1       	in	r18, 0x04	; 4
  ba:	35 b1       	in	r19, 0x05	; 5
  bc:	28 bb       	out	0x18, r18	; 24
		if (a != LED){
  be:	98 b3       	in	r25, 0x18	; 24
  c0:	89 17       	cp	r24, r25
  c2:	99 f3       	breq	.-26     	; 0xaa <main+0x12>
			UDR = ADC;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	8c b9       	out	0x0c, r24	; 12
  ca:	ef cf       	rjmp	.-34     	; 0xaa <main+0x12>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
