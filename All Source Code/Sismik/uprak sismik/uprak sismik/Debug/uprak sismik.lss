
uprak sismik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002da  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000309  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000df3  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006d4  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000427  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d5  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000040f  00000000  00000000  00001eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000282  00000282  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000234c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.LCD_Command 00000056  0000011e  0000011e  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.LCD_Char 00000056  00000174  00000174  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_Init 0000003c  0000020a  0000020a  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_String 00000040  000001ca  000001ca  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_Clear 0000001a  00000246  00000246  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.uart_init 00000014  00000260  00000260  000002b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.uart_transmit 00000008  00000274  00000274  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.uart_receive 00000006  0000027c  0000027c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data 00000038  0000006c  0000006c  000000c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.main    0000007a  000000a4  000000a4  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   8:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
   c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  10:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  14:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  18:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  24:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  28:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  2c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  30:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  34:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  38:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  3c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  40:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  44:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  4c:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>
  50:	0c 94 41 01 	jmp	0x282	; 0x282 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000282 <__bad_interrupt>:
 282:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Command:

0000011e <LCD_Command>:
#define BAUD 4800
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);
 11e:	98 b3       	in	r25, 0x18	; 24
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	92 2b       	or	r25, r18
 128:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);
 12a:	98 b3       	in	r25, 0x18	; 24
 12c:	9e 7f       	andi	r25, 0xFE	; 254
 12e:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<EN);
 130:	98 b3       	in	r25, 0x18	; 24
 132:	92 60       	ori	r25, 0x02	; 2
 134:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 138:	98 b3       	in	r25, 0x18	; 24
 13a:	9d 7f       	andi	r25, 0xFD	; 253
 13c:	98 bb       	out	0x18, r25	; 24
 13e:	32 e4       	ldi	r19, 0x42	; 66
 140:	3a 95       	dec	r19
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_Command+0x22>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_Command+0x28>
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 146:	28 b3       	in	r18, 0x18	; 24
 148:	30 e1       	ldi	r19, 0x10	; 16
 14a:	83 9f       	mul	r24, r19
 14c:	c0 01       	movw	r24, r0
 14e:	11 24       	eor	r1, r1
 150:	92 2f       	mov	r25, r18
 152:	9f 70       	andi	r25, 0x0F	; 15
 154:	89 2b       	or	r24, r25
 156:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 158:	88 b3       	in	r24, 0x18	; 24
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	88 bb       	out	0x18, r24	; 24
 15e:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 160:	88 b3       	in	r24, 0x18	; 24
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	83 ef       	ldi	r24, 0xF3	; 243
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Command+0x4c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Command+0x52>
 170:	00 00       	nop
 172:	08 95       	ret

Disassembly of section .text.LCD_Char:

00000174 <LCD_Char>:
	_delay_ms(2);
}
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 174:	98 b3       	in	r25, 0x18	; 24
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	28 2f       	mov	r18, r24
 17a:	20 7f       	andi	r18, 0xF0	; 240
 17c:	92 2b       	or	r25, r18
 17e:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);
 180:	98 b3       	in	r25, 0x18	; 24
 182:	91 60       	ori	r25, 0x01	; 1
 184:	98 bb       	out	0x18, r25	; 24
	LCD_Port|= (1<<EN);
 186:	98 b3       	in	r25, 0x18	; 24
 188:	92 60       	ori	r25, 0x02	; 2
 18a:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 18e:	98 b3       	in	r25, 0x18	; 24
 190:	9d 7f       	andi	r25, 0xFD	; 253
 192:	98 bb       	out	0x18, r25	; 24
 194:	32 e4       	ldi	r19, 0x42	; 66
 196:	3a 95       	dec	r19
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Char+0x22>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Char+0x28>
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);
 19c:	28 b3       	in	r18, 0x18	; 24
 19e:	30 e1       	ldi	r19, 0x10	; 16
 1a0:	83 9f       	mul	r24, r19
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	92 2f       	mov	r25, r18
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 2b       	or	r24, r25
 1ac:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	8d 7f       	andi	r24, 0xFD	; 253
 1ba:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1bc:	83 ef       	ldi	r24, 0xF3	; 243
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Char+0x4c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Char+0x52>
 1c6:	00 00       	nop
 1c8:	08 95       	ret

Disassembly of section .text.LCD_Init:

0000020a <LCD_Init>:
	_delay_ms(2);
}
void LCD_Init (void)
{
	LCD_Dir = 0xFF;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	87 bb       	out	0x17, r24	; 23
 20e:	87 e8       	ldi	r24, 0x87	; 135
 210:	93 e1       	ldi	r25, 0x13	; 19
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_Init+0x8>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_Init+0xe>
 218:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x02);
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
	LCD_Command(0x28);
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
	LCD_Command(0x0c);
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
	LCD_Command(0x06);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
	LCD_Command(0x01);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
 238:	83 ef       	ldi	r24, 0xF3	; 243
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_Init+0x32>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_Init+0x38>
 242:	00 00       	nop
 244:	08 95       	ret

Disassembly of section .text.LCD_String:

000001ca <LCD_String>:
	_delay_ms(2);
}
void LCD_String (const char *str)
{
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	6b 01       	movw	r12, r22
 1d6:	e8 2e       	mov	r14, r24
	int i;
	for(i=0;str[i]!=0;i++)
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCD_String+0x1a>
	{
		LCD_Char (str[i]);
 1de:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_Char>
	_delay_ms(2);
}
void LCD_String (const char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	ae 2d       	mov	r26, r14
 1e6:	c6 01       	movw	r24, r12
 1e8:	8c 0f       	add	r24, r28
 1ea:	9d 1f       	adc	r25, r29
 1ec:	a1 1d       	adc	r26, r1
 1ee:	d7 fd       	sbrc	r29, 7
 1f0:	aa 95       	dec	r26
 1f2:	fc 01       	movw	r30, r24
 1f4:	84 91       	lpm	r24, Z
 1f6:	a7 fd       	sbrc	r26, 7
 1f8:	80 81       	ld	r24, Z
 1fa:	81 11       	cpse	r24, r1
 1fc:	f0 cf       	rjmp	.-32     	; 0x1de <LCD_String+0x14>
	{
		LCD_Char (str[i]);
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

Disassembly of section .text.LCD_Clear:

00000246 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
 24c:	83 ef       	ldi	r24, 0xF3	; 243
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Clear+0xa>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Clear+0x10>
 256:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
 25e:	08 95       	ret

Disassembly of section .text.uart_init:

00000260 <uart_init>:
}

void uart_init (void)
{
	UBRRH=(BAUDRATE>>8);
 260:	10 bc       	out	0x20, r1	; 32
	UBRRL=BAUDRATE;
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN)|(1<<RXEN);
 266:	8a b1       	in	r24, 0x0a	; 10
 268:	88 61       	ori	r24, 0x18	; 24
 26a:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 26c:	80 b5       	in	r24, 0x20	; 32
 26e:	86 68       	ori	r24, 0x86	; 134
 270:	80 bd       	out	0x20, r24	; 32
 272:	08 95       	ret

Disassembly of section .text.uart_transmit:

00000274 <uart_transmit>:
}

void uart_transmit (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));
 274:	5d 9b       	sbis	0x0b, 5	; 11
 276:	fe cf       	rjmp	.-4      	; 0x274 <uart_transmit>
	UDR = data;
 278:	8c b9       	out	0x0c, r24	; 12
 27a:	08 95       	ret

Disassembly of section .text.uart_receive:

0000027c <uart_receive>:
}
unsigned char uart_receive (void)
{
	while(!(UCSRA) & (1<<RXC));
 27c:	8b b1       	in	r24, 0x0b	; 11
	return UDR;
 27e:	8c b1       	in	r24, 0x0c	; 12
}
 280:	08 95       	ret

Disassembly of section .text.main:

000000a4 <main>:

int main()
{
	LCD_Init();
  a4:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_Init>
	uart_init();
  a8:	0e 94 30 01 	call	0x260	; 0x260 <uart_init>
	char a;
	char b;
	LCD_String("UAP SISMIK");
  ac:	6c e6       	ldi	r22, 0x6C	; 108
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_String>
  b6:	2f e7       	ldi	r18, 0x7F	; 127
  b8:	8a e1       	ldi	r24, 0x1A	; 26
  ba:	96 e0       	ldi	r25, 0x06	; 6
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x18>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x22>
  c6:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear();
  c8:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Clear>
	LCD_String("AkhmmadNizar");
  cc:	67 e7       	ldi	r22, 0x77	; 119
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_String>
	LCD_Command(0xC0);
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Command>
	LCD_String("205150300111040");
  dc:	64 e8       	ldi	r22, 0x84	; 132
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_String>
  e6:	2f e1       	ldi	r18, 0x1F	; 31
  e8:	81 ea       	ldi	r24, 0xA1	; 161
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x48>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x52>
  f6:	00 00       	nop
	_delay_ms(2500);
	LCD_Clear();
  f8:	0e 94 23 01 	call	0x246	; 0x246 <LCD_Clear>
	LCD_String("INPUT CHARACTER");
  fc:	64 e9       	ldi	r22, 0x94	; 148
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_String>
	while(1)
	{
		if ((UCSRA & (1<<RXC)) != 0)
 106:	5f 9b       	sbis	0x0b, 7	; 11
 108:	fe cf       	rjmp	.-4      	; 0x106 <main+0x62>
		{
			a=uart_receive();
 10a:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_receive>
			uart_transmit(a);
 10e:	0e 94 3a 01 	call	0x274	; 0x274 <uart_transmit>
			a= b;
	LCD_String(b);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LCD_String>
 11c:	f4 cf       	rjmp	.-24     	; 0x106 <main+0x62>
